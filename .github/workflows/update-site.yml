name: Build and deploy website

on:
  # Run nightly at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

  # Allow manual triggering
  workflow_dispatch:

  # Run on pushes to main branch
  push:
    branches: [ main, master ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ZOTERO_USER_ID: ${{ secrets.ZOTERO_USER_ID }}
      ZOTERO_API_KEY: ${{ secrets.ZOTERO_API_KEY }}
      ZOTERO_COLLECTION_KEY: ${{ secrets.ZOTERO_COLLECTION_KEY }}
      RENV_PATHS_ROOT: ~/.local/share/renv

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install pandoc (fast, no need to cache)
      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: '3.1.11'

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: release
          tinytex: true

      # Cache TinyTeX - using a simpler key that doesn't change with every .qmd edit
      # Only invalidate when we explicitly want to rebuild LaTeX packages
      - name: Cache TinyTeX
        uses: actions/cache@v4
        with:
          path: ~/.TinyTeX
          key: ${{ runner.os }}-tinytex-2024
          restore-keys: |
            ${{ runner.os }}-tinytex-

      - name: Verify Quarto and pandoc installation
        run: |
          echo "Quarto version:"
          quarto --version
          echo "Pandoc version:"
          pandoc --version
          echo "Pandoc location:"
          which pandoc

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.0'
          use-public-rspm: true

      # Restore R packages cache first (read-only for this step)
      - name: Restore R packages cache
        id: cache-renv
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.local/share/renv
            ~/.cache/R/renv
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev

      - name: Install renv
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) {
            install.packages("renv", repos = "https://cloud.r-project.org/")
          }
        shell: Rscript {0}

      - name: Check renv.lock exists
        run: |
          if [ ! -f "renv.lock" ]; then
            echo "‚ùå renv.lock not found!"
            echo "üí° Make sure renv.lock is committed to the repository"
            exit 1
          fi
          echo "‚úÖ renv.lock found"
          echo "üìã renv.lock info:"
          head -20 renv.lock

      - name: Check cache status
        run: |
          if [ "${{ steps.cache-renv.outputs.cache-hit }}" == "true" ]; then
            echo "‚úÖ R packages cache hit! Using cached packages."
          else
            echo "üì¶ R packages cache miss. Will install packages."
          fi

      - name: Restore renv environment
        run: |
          cat("üîÑ Restoring renv environment...\n")

          # Try to restore from renv.lock
          tryCatch({
            renv::restore(prompt = FALSE)
            cat("‚úÖ renv restore completed\n")
          }, error = function(e) {
            cat("‚ö†Ô∏è renv restore failed:", e$message, "\n")
            cat("üîß Attempting to install packages manually...\n")

            # Install critical packages manually if restore fails
            critical_packages <- c("tidyverse", "glue", "googlesheets4", "zoterro", "svglite", "lubridate", "rmarkdown", "knitr")
            for (pkg in critical_packages) {
              if (!requireNamespace(pkg, quietly = TRUE)) {
                cat("üì• Installing", pkg, "...\n")
                install.packages(pkg, repos = "https://cloud.r-project.org/")
              }
            }
          })

          # Check critical packages
          cat("üì¶ Verifying critical packages...\n")
          critical_packages <- c("tidyverse", "glue", "googlesheets4", "zoterro", "svglite", "rmarkdown", "knitr")
          missing_packages <- c()
          for (pkg in critical_packages) {
            if (requireNamespace(pkg, quietly = TRUE)) {
              cat("‚úÖ", pkg, "- available\n")
            } else {
              cat("‚ùå", pkg, "- MISSING\n")
              missing_packages <- c(missing_packages, pkg)
            }
          }

          # Install any missing critical packages
          if (length(missing_packages) > 0) {
            cat("üîß Installing missing packages...\n")
            for (pkg in missing_packages) {
              cat("üì• Installing", pkg, "...\n")
              install.packages(pkg, repos = "https://cloud.r-project.org/")
            }
          }

          cat("‚úÖ All critical packages verified\n")
        shell: Rscript {0}

      # Save R packages cache only if it was a miss (avoid unnecessary saves)
      - name: Save R packages cache
        if: steps.cache-renv.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.local/share/renv
            ~/.cache/R/renv
          key: ${{ steps.cache-renv.outputs.cache-primary-key }}

      - name: Verify secrets (without exposing values)
        run: |
          if [ -z "$ZOTERO_USER_ID" ]; then echo "‚ùå ZOTERO_USER_ID not set"; exit 1; fi
          if [ -z "$ZOTERO_API_KEY" ]; then echo "‚ùå ZOTERO_API_KEY not set"; exit 1; fi
          if [ -z "$ZOTERO_COLLECTION_KEY" ]; then echo "‚ùå ZOTERO_COLLECTION_KEY not set"; exit 1; fi
          echo "‚úÖ All Zotero secrets are configured"

      - name: Render main page
        run: |
          quarto render index.qmd

      - name: Render publications page
        run: |
          quarto render publications.qmd

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the rendered HTML files and any supporting files
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
